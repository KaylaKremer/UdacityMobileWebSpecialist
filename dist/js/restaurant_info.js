'use strict';

var restaurant = void 0;
var map = void 0;
var liveMap = false;
var initLoad = true;

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = function () {
	fetchRestaurantFromURL(function (error, restaurant) {
		if (error) {
			// Got an error!
			console.error(error, restaurant);
		} else {
			fillBreadcrumb();
		}
	});
};

/**
 * Get current restaurant from page URL.
 */
var fetchRestaurantFromURL = function fetchRestaurantFromURL(callback) {
	if (self.restaurant) {
		// restaurant already fetched!
		callback(null, self.restaurant);
		return;
	}
	var id = getParameterByName('id');
	if (!id) {
		// no id found in URL
		error = 'No restaurant id in URL';
		callback(error, null);
	} else {
		DBHelper.fetchRestaurantById(id, function (error, restaurant) {
			self.restaurant = restaurant;
			if (!restaurant) {
				console.error(error);
				return;
			}
			fillRestaurantHTML();
			callback(null, restaurant);
		});
	}
};

/**
 * Create restaurant HTML and add it to the webpage
 */

/* If a live map isn't already enabled, removes the static map image and replaces it with a live Google Map. */
var getLiveMap = function getLiveMap() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	if (liveMap) {
		return;
	} else {
		var staticMapImg = document.getElementById('static-map-img');
		staticMapImg.parentNode.removeChild(staticMapImg);
		self.map = new google.maps.Map(document.getElementById('map'), {
			zoom: 16,
			center: self.restaurant.latlng,
			scrollwheel: false
		});
		addMarkerToMap();
		liveMap = true;
	}
};

var fillRestaurantHTML = function fillRestaurantHTML() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	/* Loads a static map image if it's the initial page load. Adds a click event listener so that when the user clicks on the map, it removes the static map image and loads a live map in its place. */
	if (initLoad) {
		var staticMap = DBHelper.staticImageForMapRestaurantInfo(self.restaurant);
		var _map = document.getElementById('map');
		var staticMapImg = document.createElement('img');
		staticMapImg.id = 'static-map-img';
		staticMapImg.alt = 'Static Google Maps image';
		staticMapImg.style.width = _map.clientWidth + 'px';
		staticMapImg.style.height = _map.clientHeight + 'px';
		staticMapImg.src = staticMap;
		staticMapImg.addEventListener('click', function () {
			getLiveMap(self.restaurant);
		});
		_map.appendChild(staticMapImg);
		initLoad = false;
	} else {
		addMarkerToMap();
	}
	var name = document.getElementById('restaurant-name');
	name.innerHTML = restaurant.name;

	var address = document.getElementById('restaurant-address');
	address.innerHTML = restaurant.address;

	/* Lazy loads small or large version of restaurant image based on data-srcset and auto data-sizes. Also dynamically sets alt and title text of the image. */
	var image = document.getElementById('restaurant-img');
	image.className = 'restaurant-img lazyload';

	/* Backup code without lazy load
 image.src = DBHelper.largeImageUrlForRestaurant(restaurant);
 image.srcset = `${DBHelper.smallImageUrlForRestaurant(restaurant)} 400w, ${DBHelper.largeImageUrlForRestaurant(restaurant)} 800w`;
 image.sizes = '50vw'; */
	image.setAttribute('data-src', DBHelper.smallImageUrlForRestaurant(restaurant) + ' 400w');
	image.setAttribute('data-srcset', DBHelper.smallImageUrlForRestaurant(restaurant) + ' 400w, ' + DBHelper.largeImageUrlForRestaurant(restaurant) + ' 800w');
	image.setAttribute('data-sizes', 'auto');
	image.title = '' + restaurant.name;
	image.alt = restaurant.name + ' in ' + restaurant.neighborhood + ' - ' + restaurant.cuisine_type + ' restaurant';

	var cuisine = document.getElementById('restaurant-cuisine');
	cuisine.innerHTML = restaurant.cuisine_type;

	// fill operating hours
	if (restaurant.operating_hours) {
		fillRestaurantHoursHTML();
	}
	// fill reviews
	DBHelper.fetchReviewsById(restaurant.id, fillReviewsHTML);
};

/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */
var fillRestaurantHoursHTML = function fillRestaurantHoursHTML() {
	var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.operating_hours;

	var hours = document.getElementById('restaurant-hours');
	for (var key in operatingHours) {
		var row = document.createElement('tr');

		var day = document.createElement('td');
		day.innerHTML = key;
		row.appendChild(day);

		var time = document.createElement('td');
		time.innerHTML = operatingHours[key];
		row.appendChild(time);

		hours.appendChild(row);
	}
};

/**
 * Create all reviews HTML and add them to the webpage.
 */
var fillReviewsHTML = function fillReviewsHTML(error, reviews) {
	if (error) {
		console.log(error);
	}
	self.restaurant.reviews = reviews;
	var container = document.getElementById('reviews-container');
	var ul = document.getElementById('reviews-list');

	var title = document.createElement('h2');
	title.innerHTML = 'Reviews';
	container.insertBefore(title, ul);

	if (!reviews) {
		var noReviews = document.createElement('p');
		noReviews.id = 'no-reviews';
		noReviews.innerHTML = 'No reviews yet!';
		container.insertBefore(noReviews, ul);
	} else {
		reviews.forEach(function (review) {
			ul.appendChild(createReviewHTML(review));
		});
		container.appendChild(ul);
	}
};

/**
 * Create review HTML and add it to the webpage.
 */
var createReviewHTML = function createReviewHTML(review) {
	var li = document.createElement('li');
	var name = document.createElement('p');
	name.classList.add('reviews-header');
	name.innerHTML = review.name;
	li.appendChild(name);

	var timestamp = document.createElement('p');
	timestamp.classList.add('reviews-header');
	var createdAtTimestamp = new Date(review.createdAt);
	var updatedAtTimestamp = new Date(review.updatedAt);
	if (createdAtTimestamp === updatedAtTimestamp) {
		timestamp.innerHTML = createdAtTimestamp.toLocaleString();
	} else {
		timestamp.innerHTML = updatedAtTimestamp.toLocaleString();
	}
	li.appendChild(timestamp);

	/*const updatedAt = document.createElement('p');
 updatedAt.classList.add('reviews-header');
 updatedAt.innerHTML = DBHelper.convertTimestamp(review.updatedAt);
 li.appendChild(updatedAt);*/

	var rating = document.createElement('p');
	rating.classList.add('reviews-score');
	rating.innerHTML = 'Rating: ' + review.rating;
	li.appendChild(rating);

	var comments = document.createElement('p');
	comments.innerHTML = review.comments;
	li.appendChild(comments);

	return li;
};

/**
 * Add restaurant name to the breadcrumb navigation menu
 */
var fillBreadcrumb = function fillBreadcrumb() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	var breadcrumb = document.getElementById('breadcrumb');
	var li = document.createElement('li');
	li.innerHTML = restaurant.name;

	//Set ARIA attributes so screenreader knows its on the current page for the restaurant in the breadcrumb trail.
	li.setAttribute('aria-label', restaurant.name);
	li.setAttribute('aria-describedby', 'breadcrumb-description');
	li.setAttribute('tabindex', '0');

	//Dynamically set title attribute
	li.title = restaurant.name;
	breadcrumb.appendChild(li);
};

/**
 * Get a parameter by name from page URL.
 */
var getParameterByName = function getParameterByName(name, url) {
	if (!url) url = window.location.href;
	name = name.replace(/[\[\]]/g, '\\$&');
	var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
	    results = regex.exec(url);
	if (!results) return null;
	if (!results[2]) return '';
	return decodeURIComponent(results[2].replace(/\+/g, ' '));
};

/**
 * Add marker for current restaurant to the map.
 */
var addMarkerToMap = function addMarkerToMap() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	// Add marker to the map
	var marker = DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);
	google.maps.event.addListener(marker, 'click', function () {
		window.location.href = marker.url;
	});
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3RhdXJhbnRfaW5mby5qcyJdLCJuYW1lcyI6WyJyZXN0YXVyYW50IiwibWFwIiwibGl2ZU1hcCIsImluaXRMb2FkIiwid2luZG93IiwiaW5pdE1hcCIsImZldGNoUmVzdGF1cmFudEZyb21VUkwiLCJlcnJvciIsImNvbnNvbGUiLCJmaWxsQnJlYWRjcnVtYiIsImNhbGxiYWNrIiwic2VsZiIsImlkIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwiREJIZWxwZXIiLCJmZXRjaFJlc3RhdXJhbnRCeUlkIiwiZmlsbFJlc3RhdXJhbnRIVE1MIiwiZ2V0TGl2ZU1hcCIsInN0YXRpY01hcEltZyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJnb29nbGUiLCJtYXBzIiwiTWFwIiwiem9vbSIsImNlbnRlciIsImxhdGxuZyIsInNjcm9sbHdoZWVsIiwiYWRkTWFya2VyVG9NYXAiLCJzdGF0aWNNYXAiLCJzdGF0aWNJbWFnZUZvck1hcFJlc3RhdXJhbnRJbmZvIiwiY3JlYXRlRWxlbWVudCIsImFsdCIsInN0eWxlIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsInNyYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhcHBlbmRDaGlsZCIsIm5hbWUiLCJpbm5lckhUTUwiLCJhZGRyZXNzIiwiaW1hZ2UiLCJjbGFzc05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJzbWFsbEltYWdlVXJsRm9yUmVzdGF1cmFudCIsImxhcmdlSW1hZ2VVcmxGb3JSZXN0YXVyYW50IiwidGl0bGUiLCJuZWlnaGJvcmhvb2QiLCJjdWlzaW5lX3R5cGUiLCJjdWlzaW5lIiwib3BlcmF0aW5nX2hvdXJzIiwiZmlsbFJlc3RhdXJhbnRIb3Vyc0hUTUwiLCJmZXRjaFJldmlld3NCeUlkIiwiZmlsbFJldmlld3NIVE1MIiwib3BlcmF0aW5nSG91cnMiLCJob3VycyIsImtleSIsInJvdyIsImRheSIsInRpbWUiLCJyZXZpZXdzIiwibG9nIiwiY29udGFpbmVyIiwidWwiLCJpbnNlcnRCZWZvcmUiLCJub1Jldmlld3MiLCJmb3JFYWNoIiwiY3JlYXRlUmV2aWV3SFRNTCIsInJldmlldyIsImxpIiwiY2xhc3NMaXN0IiwiYWRkIiwidGltZXN0YW1wIiwiY3JlYXRlZEF0VGltZXN0YW1wIiwiRGF0ZSIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdFRpbWVzdGFtcCIsInVwZGF0ZWRBdCIsInRvTG9jYWxlU3RyaW5nIiwicmF0aW5nIiwiY29tbWVudHMiLCJicmVhZGNydW1iIiwidXJsIiwibG9jYXRpb24iLCJocmVmIiwicmVwbGFjZSIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJtYXJrZXIiLCJtYXBNYXJrZXJGb3JSZXN0YXVyYW50IiwiZXZlbnQiLCJhZGRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxtQkFBSjtBQUNBLElBQUlDLFlBQUo7QUFDQSxJQUFJQyxVQUFVLEtBQWQ7QUFDQSxJQUFJQyxXQUFXLElBQWY7O0FBRUE7OztBQUdBQyxPQUFPQyxPQUFQLEdBQWlCLFlBQU07QUFDdEJDLHdCQUF1QixVQUFDQyxLQUFELEVBQVFQLFVBQVIsRUFBdUI7QUFDN0MsTUFBSU8sS0FBSixFQUFXO0FBQ1Y7QUFDQUMsV0FBUUQsS0FBUixDQUFjQSxLQUFkLEVBQXFCUCxVQUFyQjtBQUNBLEdBSEQsTUFHTztBQUNOUztBQUNBO0FBQ0QsRUFQRDtBQVFBLENBVEQ7O0FBV0E7OztBQUdBLElBQU1ILHlCQUF5QixTQUF6QkEsc0JBQXlCLENBQUNJLFFBQUQsRUFBYztBQUM1QyxLQUFJQyxLQUFLWCxVQUFULEVBQXFCO0FBQ3BCO0FBQ0FVLFdBQVMsSUFBVCxFQUFlQyxLQUFLWCxVQUFwQjtBQUNBO0FBQ0E7QUFDRCxLQUFNWSxLQUFLQyxtQkFBbUIsSUFBbkIsQ0FBWDtBQUNBLEtBQUksQ0FBQ0QsRUFBTCxFQUFTO0FBQ1I7QUFDQUwsVUFBUSx5QkFBUjtBQUNBRyxXQUFTSCxLQUFULEVBQWdCLElBQWhCO0FBQ0EsRUFKRCxNQUlPO0FBQ05PLFdBQVNDLG1CQUFULENBQTZCSCxFQUE3QixFQUFpQyxVQUFDTCxLQUFELEVBQVFQLFVBQVIsRUFBdUI7QUFDdkRXLFFBQUtYLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsT0FBSSxDQUFDQSxVQUFMLEVBQWlCO0FBQ2hCUSxZQUFRRCxLQUFSLENBQWNBLEtBQWQ7QUFDQTtBQUNBO0FBQ0RTO0FBQ0FOLFlBQVMsSUFBVCxFQUFlVixVQUFmO0FBQ0EsR0FSRDtBQVNBO0FBQ0QsQ0F0QkQ7O0FBd0JBOzs7O0FBSUE7QUFDQSxJQUFNaUIsYUFBYSxTQUFiQSxVQUFhLEdBQWtDO0FBQUEsS0FBakNqQixVQUFpQyx1RUFBcEJXLEtBQUtYLFVBQWU7O0FBQ3BELEtBQUdFLE9BQUgsRUFBVztBQUNWO0FBQ0EsRUFGRCxNQUVPO0FBQ04sTUFBTWdCLGVBQWVDLFNBQVNDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQXJCO0FBQ0FGLGVBQWFHLFVBQWIsQ0FBd0JDLFdBQXhCLENBQW9DSixZQUFwQztBQUNBUCxPQUFLVixHQUFMLEdBQVcsSUFBSXNCLE9BQ2JDLElBRGEsQ0FFYkMsR0FGUyxDQUVMTixTQUFTQyxjQUFULENBQXdCLEtBQXhCLENBRkssRUFFMkI7QUFDcENNLFNBQU0sRUFEOEI7QUFFcENDLFdBQVFoQixLQUFLWCxVQUFMLENBQWdCNEIsTUFGWTtBQUdwQ0MsZ0JBQWE7QUFIdUIsR0FGM0IsQ0FBWDtBQU9BQztBQUNBNUIsWUFBVSxJQUFWO0FBQ0E7QUFDRCxDQWhCRDs7QUFrQkEsSUFBTWMscUJBQXFCLFNBQXJCQSxrQkFBcUIsR0FBa0M7QUFBQSxLQUFqQ2hCLFVBQWlDLHVFQUFwQlcsS0FBS1gsVUFBZTs7QUFDNUQ7QUFDQSxLQUFJRyxRQUFKLEVBQWE7QUFDWixNQUFNNEIsWUFBWWpCLFNBQVNrQiwrQkFBVCxDQUF5Q3JCLEtBQUtYLFVBQTlDLENBQWxCO0FBQ0EsTUFBTUMsT0FBTWtCLFNBQVNDLGNBQVQsQ0FBd0IsS0FBeEIsQ0FBWjtBQUNBLE1BQU1GLGVBQWVDLFNBQVNjLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBckI7QUFDQWYsZUFBYU4sRUFBYixHQUFrQixnQkFBbEI7QUFDQU0sZUFBYWdCLEdBQWIsR0FBbUIsMEJBQW5CO0FBQ0FoQixlQUFhaUIsS0FBYixDQUFtQkMsS0FBbkIsR0FBOEJuQyxLQUFJb0MsV0FBbEM7QUFDQW5CLGVBQWFpQixLQUFiLENBQW1CRyxNQUFuQixHQUErQnJDLEtBQUlzQyxZQUFuQztBQUNBckIsZUFBYXNCLEdBQWIsR0FBbUJULFNBQW5CO0FBQ0FiLGVBQWF1QixnQkFBYixDQUE4QixPQUE5QixFQUF1QyxZQUFNO0FBQzVDeEIsY0FBV04sS0FBS1gsVUFBaEI7QUFDQSxHQUZEO0FBR0FDLE9BQUl5QyxXQUFKLENBQWdCeEIsWUFBaEI7QUFDQWYsYUFBVyxLQUFYO0FBQ0EsRUFkRCxNQWNPO0FBQ04yQjtBQUNBO0FBQ0QsS0FBTWEsT0FBT3hCLFNBQVNDLGNBQVQsQ0FBd0IsaUJBQXhCLENBQWI7QUFDQXVCLE1BQUtDLFNBQUwsR0FBaUI1QyxXQUFXMkMsSUFBNUI7O0FBRUEsS0FBTUUsVUFBVTFCLFNBQVNDLGNBQVQsQ0FBd0Isb0JBQXhCLENBQWhCO0FBQ0F5QixTQUFRRCxTQUFSLEdBQW9CNUMsV0FBVzZDLE9BQS9COztBQUVBO0FBQ0EsS0FBTUMsUUFBUTNCLFNBQVNDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQWQ7QUFDQTBCLE9BQU1DLFNBQU4sR0FBa0IseUJBQWxCOztBQUVBOzs7O0FBSUFELE9BQU1FLFlBQU4sQ0FBbUIsVUFBbkIsRUFBa0NsQyxTQUFTbUMsMEJBQVQsQ0FBb0NqRCxVQUFwQyxDQUFsQztBQUNBOEMsT0FBTUUsWUFBTixDQUFtQixhQUFuQixFQUFvQ2xDLFNBQVNtQywwQkFBVCxDQUFvQ2pELFVBQXBDLENBQXBDLGVBQTZGYyxTQUFTb0MsMEJBQVQsQ0FBb0NsRCxVQUFwQyxDQUE3RjtBQUNBOEMsT0FBTUUsWUFBTixDQUFtQixZQUFuQixFQUFpQyxNQUFqQztBQUNBRixPQUFNSyxLQUFOLFFBQWlCbkQsV0FBVzJDLElBQTVCO0FBQ0FHLE9BQU1aLEdBQU4sR0FBZWxDLFdBQVcyQyxJQUExQixZQUFxQzNDLFdBQVdvRCxZQUFoRCxXQUFrRXBELFdBQVdxRCxZQUE3RTs7QUFFQSxLQUFNQyxVQUFVbkMsU0FBU0MsY0FBVCxDQUF3QixvQkFBeEIsQ0FBaEI7QUFDQWtDLFNBQVFWLFNBQVIsR0FBb0I1QyxXQUFXcUQsWUFBL0I7O0FBRUE7QUFDQSxLQUFJckQsV0FBV3VELGVBQWYsRUFBZ0M7QUFDL0JDO0FBQ0E7QUFDRDtBQUNBMUMsVUFBUzJDLGdCQUFULENBQTBCekQsV0FBV1ksRUFBckMsRUFBeUM4QyxlQUF6QztBQUNBLENBaEREOztBQWtEQTs7O0FBR0EsSUFBTUYsMEJBQTBCLFNBQTFCQSx1QkFBMEIsR0FBc0Q7QUFBQSxLQUFyREcsY0FBcUQsdUVBQXBDaEQsS0FBS1gsVUFBTCxDQUFnQnVELGVBQW9COztBQUNyRixLQUFNSyxRQUFRekMsU0FBU0MsY0FBVCxDQUF3QixrQkFBeEIsQ0FBZDtBQUNBLE1BQUssSUFBSXlDLEdBQVQsSUFBZ0JGLGNBQWhCLEVBQWdDO0FBQy9CLE1BQU1HLE1BQU0zQyxTQUFTYyxhQUFULENBQXVCLElBQXZCLENBQVo7O0FBRUEsTUFBTThCLE1BQU01QyxTQUFTYyxhQUFULENBQXVCLElBQXZCLENBQVo7QUFDQThCLE1BQUluQixTQUFKLEdBQWdCaUIsR0FBaEI7QUFDQUMsTUFBSXBCLFdBQUosQ0FBZ0JxQixHQUFoQjs7QUFFQSxNQUFNQyxPQUFPN0MsU0FBU2MsYUFBVCxDQUF1QixJQUF2QixDQUFiO0FBQ0ErQixPQUFLcEIsU0FBTCxHQUFpQmUsZUFBZUUsR0FBZixDQUFqQjtBQUNBQyxNQUFJcEIsV0FBSixDQUFnQnNCLElBQWhCOztBQUVBSixRQUFNbEIsV0FBTixDQUFrQm9CLEdBQWxCO0FBQ0E7QUFDRCxDQWZEOztBQWlCQTs7O0FBR0EsSUFBTUosa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFDbkQsS0FBRCxFQUFRMEQsT0FBUixFQUFvQjtBQUMzQyxLQUFHMUQsS0FBSCxFQUFTO0FBQ1JDLFVBQVEwRCxHQUFSLENBQVkzRCxLQUFaO0FBQ0E7QUFDREksTUFBS1gsVUFBTCxDQUFnQmlFLE9BQWhCLEdBQTBCQSxPQUExQjtBQUNBLEtBQU1FLFlBQVloRCxTQUFTQyxjQUFULENBQXdCLG1CQUF4QixDQUFsQjtBQUNBLEtBQU1nRCxLQUFLakQsU0FBU0MsY0FBVCxDQUF3QixjQUF4QixDQUFYOztBQUVBLEtBQU0rQixRQUFRaEMsU0FBU2MsYUFBVCxDQUF1QixJQUF2QixDQUFkO0FBQ0FrQixPQUFNUCxTQUFOLEdBQWtCLFNBQWxCO0FBQ0F1QixXQUFVRSxZQUFWLENBQXVCbEIsS0FBdkIsRUFBOEJpQixFQUE5Qjs7QUFFQSxLQUFJLENBQUNILE9BQUwsRUFBYztBQUNiLE1BQU1LLFlBQVluRCxTQUFTYyxhQUFULENBQXVCLEdBQXZCLENBQWxCO0FBQ0FxQyxZQUFVMUQsRUFBVixHQUFlLFlBQWY7QUFDQTBELFlBQVUxQixTQUFWLEdBQXNCLGlCQUF0QjtBQUNBdUIsWUFBVUUsWUFBVixDQUF1QkMsU0FBdkIsRUFBa0NGLEVBQWxDO0FBQ0EsRUFMRCxNQUtPO0FBQ05ILFVBQVFNLE9BQVIsQ0FBZ0Isa0JBQVU7QUFDekJILE1BQUcxQixXQUFILENBQWU4QixpQkFBaUJDLE1BQWpCLENBQWY7QUFDQSxHQUZEO0FBR0FOLFlBQVV6QixXQUFWLENBQXNCMEIsRUFBdEI7QUFDQTtBQUNELENBdkJEOztBQXlCQTs7O0FBR0EsSUFBTUksbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0MsTUFBRCxFQUFZO0FBQ3BDLEtBQU1DLEtBQUt2RCxTQUFTYyxhQUFULENBQXVCLElBQXZCLENBQVg7QUFDQSxLQUFNVSxPQUFPeEIsU0FBU2MsYUFBVCxDQUF1QixHQUF2QixDQUFiO0FBQ0FVLE1BQUtnQyxTQUFMLENBQWVDLEdBQWYsQ0FBbUIsZ0JBQW5CO0FBQ0FqQyxNQUFLQyxTQUFMLEdBQWlCNkIsT0FBTzlCLElBQXhCO0FBQ0ErQixJQUFHaEMsV0FBSCxDQUFlQyxJQUFmOztBQUVBLEtBQU1rQyxZQUFZMUQsU0FBU2MsYUFBVCxDQUF1QixHQUF2QixDQUFsQjtBQUNBNEMsV0FBVUYsU0FBVixDQUFvQkMsR0FBcEIsQ0FBd0IsZ0JBQXhCO0FBQ0EsS0FBTUUscUJBQXFCLElBQUlDLElBQUosQ0FBU04sT0FBT08sU0FBaEIsQ0FBM0I7QUFDQSxLQUFNQyxxQkFBcUIsSUFBSUYsSUFBSixDQUFTTixPQUFPUyxTQUFoQixDQUEzQjtBQUNBLEtBQUlKLHVCQUF1Qkcsa0JBQTNCLEVBQThDO0FBQzdDSixZQUFVakMsU0FBVixHQUFzQmtDLG1CQUFtQkssY0FBbkIsRUFBdEI7QUFDQSxFQUZELE1BRU87QUFDTk4sWUFBVWpDLFNBQVYsR0FBc0JxQyxtQkFBbUJFLGNBQW5CLEVBQXRCO0FBQ0E7QUFDRFQsSUFBR2hDLFdBQUgsQ0FBZW1DLFNBQWY7O0FBRUE7Ozs7O0FBS0EsS0FBTU8sU0FBU2pFLFNBQVNjLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBZjtBQUNBbUQsUUFBT1QsU0FBUCxDQUFpQkMsR0FBakIsQ0FBcUIsZUFBckI7QUFDQVEsUUFBT3hDLFNBQVAsZ0JBQThCNkIsT0FBT1csTUFBckM7QUFDQVYsSUFBR2hDLFdBQUgsQ0FBZTBDLE1BQWY7O0FBRUEsS0FBTUMsV0FBV2xFLFNBQVNjLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBakI7QUFDQW9ELFVBQVN6QyxTQUFULEdBQXFCNkIsT0FBT1ksUUFBNUI7QUFDQVgsSUFBR2hDLFdBQUgsQ0FBZTJDLFFBQWY7O0FBRUEsUUFBT1gsRUFBUDtBQUNBLENBakNEOztBQW1DQTs7O0FBR0EsSUFBTWpFLGlCQUFpQixTQUFqQkEsY0FBaUIsR0FBZ0M7QUFBQSxLQUEvQlQsVUFBK0IsdUVBQXBCVyxLQUFLWCxVQUFlOztBQUN0RCxLQUFNc0YsYUFBYW5FLFNBQVNDLGNBQVQsQ0FBd0IsWUFBeEIsQ0FBbkI7QUFDQSxLQUFNc0QsS0FBS3ZELFNBQVNjLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBWDtBQUNBeUMsSUFBRzlCLFNBQUgsR0FBZTVDLFdBQVcyQyxJQUExQjs7QUFFQTtBQUNBK0IsSUFBRzFCLFlBQUgsQ0FBZ0IsWUFBaEIsRUFBOEJoRCxXQUFXMkMsSUFBekM7QUFDQStCLElBQUcxQixZQUFILENBQWdCLGtCQUFoQixFQUFvQyx3QkFBcEM7QUFDQTBCLElBQUcxQixZQUFILENBQWdCLFVBQWhCLEVBQTRCLEdBQTVCOztBQUVBO0FBQ0EwQixJQUFHdkIsS0FBSCxHQUFXbkQsV0FBVzJDLElBQXRCO0FBQ0EyQyxZQUFXNUMsV0FBWCxDQUF1QmdDLEVBQXZCO0FBQ0EsQ0FiRDs7QUFlQTs7O0FBR0EsSUFBTTdELHFCQUFxQixTQUFyQkEsa0JBQXFCLENBQUM4QixJQUFELEVBQU80QyxHQUFQLEVBQWU7QUFDekMsS0FBSSxDQUFDQSxHQUFMLEVBQ0NBLE1BQU1uRixPQUFPb0YsUUFBUCxDQUFnQkMsSUFBdEI7QUFDRDlDLFFBQU9BLEtBQUsrQyxPQUFMLENBQWEsU0FBYixFQUF3QixNQUF4QixDQUFQO0FBQ0EsS0FBTUMsUUFBUSxJQUFJQyxNQUFKLFVBQWtCakQsSUFBbEIsdUJBQWQ7QUFBQSxLQUNDa0QsVUFBVUYsTUFBTUcsSUFBTixDQUFXUCxHQUFYLENBRFg7QUFFQSxLQUFJLENBQUNNLE9BQUwsRUFDQyxPQUFPLElBQVA7QUFDRCxLQUFJLENBQUNBLFFBQVEsQ0FBUixDQUFMLEVBQ0MsT0FBTyxFQUFQO0FBQ0QsUUFBT0UsbUJBQW1CRixRQUFRLENBQVIsRUFBV0gsT0FBWCxDQUFtQixLQUFuQixFQUEwQixHQUExQixDQUFuQixDQUFQO0FBQ0EsQ0FYRDs7QUFhQTs7O0FBR0EsSUFBTTVELGlCQUFpQixTQUFqQkEsY0FBaUIsR0FBa0M7QUFBQSxLQUFqQzlCLFVBQWlDLHVFQUFwQlcsS0FBS1gsVUFBZTs7QUFDeEQ7QUFDQSxLQUFNZ0csU0FBU2xGLFNBQVNtRixzQkFBVCxDQUFnQ3RGLEtBQUtYLFVBQXJDLEVBQWlEVyxLQUFLVixHQUF0RCxDQUFmO0FBQ0FzQixRQUFPQyxJQUFQLENBQVkwRSxLQUFaLENBQWtCQyxXQUFsQixDQUE4QkgsTUFBOUIsRUFBc0MsT0FBdEMsRUFBK0MsWUFBTTtBQUNwRDVGLFNBQU9vRixRQUFQLENBQWdCQyxJQUFoQixHQUF1Qk8sT0FBT1QsR0FBOUI7QUFDQSxFQUZEO0FBR0EsQ0FORCIsImZpbGUiOiJyZXN0YXVyYW50X2luZm8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgcmVzdGF1cmFudDtcbmxldCBtYXA7XG5sZXQgbGl2ZU1hcCA9IGZhbHNlO1xubGV0IGluaXRMb2FkID0gdHJ1ZTtcblxuLyoqXG4gKiBJbml0aWFsaXplIEdvb2dsZSBtYXAsIGNhbGxlZCBmcm9tIEhUTUwuXG4gKi9cbndpbmRvdy5pbml0TWFwID0gKCkgPT4ge1xuXHRmZXRjaFJlc3RhdXJhbnRGcm9tVVJMKChlcnJvciwgcmVzdGF1cmFudCkgPT4ge1xuXHRcdGlmIChlcnJvcikgeyBcblx0XHRcdC8vIEdvdCBhbiBlcnJvciFcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IsIHJlc3RhdXJhbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmaWxsQnJlYWRjcnVtYigpO1xuXHRcdH1cblx0fSk7XG59O1xuXG4vKipcbiAqIEdldCBjdXJyZW50IHJlc3RhdXJhbnQgZnJvbSBwYWdlIFVSTC5cbiAqL1xuY29uc3QgZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCA9IChjYWxsYmFjaykgPT4ge1xuXHRpZiAoc2VsZi5yZXN0YXVyYW50KSB7IFxuXHRcdC8vIHJlc3RhdXJhbnQgYWxyZWFkeSBmZXRjaGVkIVxuXHRcdGNhbGxiYWNrKG51bGwsIHNlbGYucmVzdGF1cmFudCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IGlkID0gZ2V0UGFyYW1ldGVyQnlOYW1lKCdpZCcpO1xuXHRpZiAoIWlkKSB7IFxuXHRcdC8vIG5vIGlkIGZvdW5kIGluIFVSTFxuXHRcdGVycm9yID0gJ05vIHJlc3RhdXJhbnQgaWQgaW4gVVJMJztcblx0XHRjYWxsYmFjayhlcnJvciwgbnVsbCk7XG5cdH0gZWxzZSB7XG5cdFx0REJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlJZChpZCwgKGVycm9yLCByZXN0YXVyYW50KSA9PiB7XG5cdFx0XHRzZWxmLnJlc3RhdXJhbnQgPSByZXN0YXVyYW50O1xuXHRcdFx0aWYgKCFyZXN0YXVyYW50KSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRmaWxsUmVzdGF1cmFudEhUTUwoKTtcblx0XHRcdGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnQpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG4vKipcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZVxuICovXG5cbi8qIElmIGEgbGl2ZSBtYXAgaXNuJ3QgYWxyZWFkeSBlbmFibGVkLCByZW1vdmVzIHRoZSBzdGF0aWMgbWFwIGltYWdlIGFuZCByZXBsYWNlcyBpdCB3aXRoIGEgbGl2ZSBHb29nbGUgTWFwLiAqL1xuY29uc3QgZ2V0TGl2ZU1hcCA9IChyZXN0YXVyYW50ID0gc2VsZi5yZXN0YXVyYW50KSA9PiB7XG5cdGlmKGxpdmVNYXApe1xuXHRcdHJldHVybjtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBzdGF0aWNNYXBJbWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGljLW1hcC1pbWcnKTtcblx0XHRzdGF0aWNNYXBJbWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdGF0aWNNYXBJbWcpO1xuXHRcdHNlbGYubWFwID0gbmV3IGdvb2dsZVxuXHRcdFx0Lm1hcHNcblx0XHRcdC5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG5cdFx0XHRcdHpvb206IDE2LFxuXHRcdFx0XHRjZW50ZXI6IHNlbGYucmVzdGF1cmFudC5sYXRsbmcsXG5cdFx0XHRcdHNjcm9sbHdoZWVsOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0YWRkTWFya2VyVG9NYXAoKTtcblx0XHRsaXZlTWFwID0gdHJ1ZTtcblx0fVxufTtcblxuY29uc3QgZmlsbFJlc3RhdXJhbnRIVE1MID0gKHJlc3RhdXJhbnQgPSBzZWxmLnJlc3RhdXJhbnQpID0+IHtcblx0LyogTG9hZHMgYSBzdGF0aWMgbWFwIGltYWdlIGlmIGl0J3MgdGhlIGluaXRpYWwgcGFnZSBsb2FkLiBBZGRzIGEgY2xpY2sgZXZlbnQgbGlzdGVuZXIgc28gdGhhdCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgbWFwLCBpdCByZW1vdmVzIHRoZSBzdGF0aWMgbWFwIGltYWdlIGFuZCBsb2FkcyBhIGxpdmUgbWFwIGluIGl0cyBwbGFjZS4gKi9cblx0aWYgKGluaXRMb2FkKXtcblx0XHRjb25zdCBzdGF0aWNNYXAgPSBEQkhlbHBlci5zdGF0aWNJbWFnZUZvck1hcFJlc3RhdXJhbnRJbmZvKHNlbGYucmVzdGF1cmFudCk7XG5cdFx0Y29uc3QgbWFwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpO1xuXHRcdGNvbnN0IHN0YXRpY01hcEltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdHN0YXRpY01hcEltZy5pZCA9ICdzdGF0aWMtbWFwLWltZyc7XG5cdFx0c3RhdGljTWFwSW1nLmFsdCA9ICdTdGF0aWMgR29vZ2xlIE1hcHMgaW1hZ2UnO1xuXHRcdHN0YXRpY01hcEltZy5zdHlsZS53aWR0aCA9IGAke21hcC5jbGllbnRXaWR0aH1weGA7XG5cdFx0c3RhdGljTWFwSW1nLnN0eWxlLmhlaWdodCA9IGAke21hcC5jbGllbnRIZWlnaHR9cHhgO1xuXHRcdHN0YXRpY01hcEltZy5zcmMgPSBzdGF0aWNNYXA7XG5cdFx0c3RhdGljTWFwSW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0Z2V0TGl2ZU1hcChzZWxmLnJlc3RhdXJhbnQpO1xuXHRcdH0pO1xuXHRcdG1hcC5hcHBlbmRDaGlsZChzdGF0aWNNYXBJbWcpO1xuXHRcdGluaXRMb2FkID0gZmFsc2U7XG5cdH0gZWxzZSB7XG5cdFx0YWRkTWFya2VyVG9NYXAoKTtcblx0fVxuXHRjb25zdCBuYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtbmFtZScpO1xuXHRuYW1lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmFtZTtcblxuXHRjb25zdCBhZGRyZXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtYWRkcmVzcycpO1xuXHRhZGRyZXNzLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuYWRkcmVzcztcblxuXHQvKiBMYXp5IGxvYWRzIHNtYWxsIG9yIGxhcmdlIHZlcnNpb24gb2YgcmVzdGF1cmFudCBpbWFnZSBiYXNlZCBvbiBkYXRhLXNyY3NldCBhbmQgYXV0byBkYXRhLXNpemVzLiBBbHNvIGR5bmFtaWNhbGx5IHNldHMgYWx0IGFuZCB0aXRsZSB0ZXh0IG9mIHRoZSBpbWFnZS4gKi9cblx0Y29uc3QgaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1pbWcnKTtcblx0aW1hZ2UuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtaW1nIGxhenlsb2FkJztcblxuXHQvKiBCYWNrdXAgY29kZSB3aXRob3V0IGxhenkgbG9hZFxuXHRpbWFnZS5zcmMgPSBEQkhlbHBlci5sYXJnZUltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcblx0aW1hZ2Uuc3Jjc2V0ID0gYCR7REJIZWxwZXIuc21hbGxJbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCl9IDQwMHcsICR7REJIZWxwZXIubGFyZ2VJbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCl9IDgwMHdgO1xuXHRpbWFnZS5zaXplcyA9ICc1MHZ3JzsgKi9cblx0aW1hZ2Uuc2V0QXR0cmlidXRlKCdkYXRhLXNyYycsIGAke0RCSGVscGVyLnNtYWxsSW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfSA0MDB3YCk7XG5cdGltYWdlLnNldEF0dHJpYnV0ZSgnZGF0YS1zcmNzZXQnLGAke0RCSGVscGVyLnNtYWxsSW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfSA0MDB3LCAke0RCSGVscGVyLmxhcmdlSW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfSA4MDB3YCk7XG5cdGltYWdlLnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplcycsICdhdXRvJyk7XG5cdGltYWdlLnRpdGxlID0gYCR7cmVzdGF1cmFudC5uYW1lfWA7XG5cdGltYWdlLmFsdCA9IGAke3Jlc3RhdXJhbnQubmFtZX0gaW4gJHtyZXN0YXVyYW50Lm5laWdoYm9yaG9vZH0gLSAke3Jlc3RhdXJhbnQuY3Vpc2luZV90eXBlfSByZXN0YXVyYW50YDtcblxuXHRjb25zdCBjdWlzaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtY3Vpc2luZScpO1xuXHRjdWlzaW5lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuY3Vpc2luZV90eXBlO1xuXG5cdC8vIGZpbGwgb3BlcmF0aW5nIGhvdXJzXG5cdGlmIChyZXN0YXVyYW50Lm9wZXJhdGluZ19ob3Vycykge1xuXHRcdGZpbGxSZXN0YXVyYW50SG91cnNIVE1MKCk7XG5cdH1cblx0Ly8gZmlsbCByZXZpZXdzXG5cdERCSGVscGVyLmZldGNoUmV2aWV3c0J5SWQocmVzdGF1cmFudC5pZCwgZmlsbFJldmlld3NIVE1MKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIHJlc3RhdXJhbnQgb3BlcmF0aW5nIGhvdXJzIEhUTUwgdGFibGUgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZS5cbiAqL1xuY29uc3QgZmlsbFJlc3RhdXJhbnRIb3Vyc0hUTUwgPSAob3BlcmF0aW5nSG91cnMgPSBzZWxmLnJlc3RhdXJhbnQub3BlcmF0aW5nX2hvdXJzKSA9PiB7XG5cdGNvbnN0IGhvdXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtaG91cnMnKTtcblx0Zm9yIChsZXQga2V5IGluIG9wZXJhdGluZ0hvdXJzKSB7XG5cdFx0Y29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcblxuXHRcdGNvbnN0IGRheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG5cdFx0ZGF5LmlubmVySFRNTCA9IGtleTtcblx0XHRyb3cuYXBwZW5kQ2hpbGQoZGF5KTtcblxuXHRcdGNvbnN0IHRpbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuXHRcdHRpbWUuaW5uZXJIVE1MID0gb3BlcmF0aW5nSG91cnNba2V5XTtcblx0XHRyb3cuYXBwZW5kQ2hpbGQodGltZSk7XG5cblx0XHRob3Vycy5hcHBlbmRDaGlsZChyb3cpO1xuXHR9XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbGwgcmV2aWV3cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cbiAqL1xuY29uc3QgZmlsbFJldmlld3NIVE1MID0gKGVycm9yLCByZXZpZXdzKSA9PiB7XG5cdGlmKGVycm9yKXtcblx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdH1cblx0c2VsZi5yZXN0YXVyYW50LnJldmlld3MgPSByZXZpZXdzO1xuXHRjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1jb250YWluZXInKTtcblx0Y29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1saXN0Jyk7XG5cblx0Y29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xuXHR0aXRsZS5pbm5lckhUTUwgPSAnUmV2aWV3cyc7XG5cdGNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGl0bGUsIHVsKTtcblxuXHRpZiAoIXJldmlld3MpIHtcblx0XHRjb25zdCBub1Jldmlld3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cdFx0bm9SZXZpZXdzLmlkID0gJ25vLXJldmlld3MnO1xuXHRcdG5vUmV2aWV3cy5pbm5lckhUTUwgPSAnTm8gcmV2aWV3cyB5ZXQhJztcblx0XHRjb250YWluZXIuaW5zZXJ0QmVmb3JlKG5vUmV2aWV3cywgdWwpO1xuXHR9IGVsc2Uge1xuXHRcdHJldmlld3MuZm9yRWFjaChyZXZpZXcgPT4ge1xuXHRcdFx0dWwuYXBwZW5kQ2hpbGQoY3JlYXRlUmV2aWV3SFRNTChyZXZpZXcpKTtcblx0XHR9KTtcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQodWwpO1xuXHR9XG59O1xuXG4vKipcbiAqIENyZWF0ZSByZXZpZXcgSFRNTCBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlLlxuICovXG5jb25zdCBjcmVhdGVSZXZpZXdIVE1MID0gKHJldmlldykgPT4ge1xuXHRjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cdGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cdG5hbWUuY2xhc3NMaXN0LmFkZCgncmV2aWV3cy1oZWFkZXInKTtcblx0bmFtZS5pbm5lckhUTUwgPSByZXZpZXcubmFtZTtcblx0bGkuYXBwZW5kQ2hpbGQobmFtZSk7XG5cblx0Y29uc3QgdGltZXN0YW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXHR0aW1lc3RhbXAuY2xhc3NMaXN0LmFkZCgncmV2aWV3cy1oZWFkZXInKTtcblx0Y29uc3QgY3JlYXRlZEF0VGltZXN0YW1wID0gbmV3IERhdGUocmV2aWV3LmNyZWF0ZWRBdCk7XG5cdGNvbnN0IHVwZGF0ZWRBdFRpbWVzdGFtcCA9IG5ldyBEYXRlKHJldmlldy51cGRhdGVkQXQpO1xuXHRpZiAoY3JlYXRlZEF0VGltZXN0YW1wID09PSB1cGRhdGVkQXRUaW1lc3RhbXApe1xuXHRcdHRpbWVzdGFtcC5pbm5lckhUTUwgPSBjcmVhdGVkQXRUaW1lc3RhbXAudG9Mb2NhbGVTdHJpbmcoKTtcblx0fSBlbHNlIHtcblx0XHR0aW1lc3RhbXAuaW5uZXJIVE1MID0gdXBkYXRlZEF0VGltZXN0YW1wLnRvTG9jYWxlU3RyaW5nKCk7XG5cdH1cblx0bGkuYXBwZW5kQ2hpbGQodGltZXN0YW1wKTtcblxuXHQvKmNvbnN0IHVwZGF0ZWRBdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0dXBkYXRlZEF0LmNsYXNzTGlzdC5hZGQoJ3Jldmlld3MtaGVhZGVyJyk7XG5cdHVwZGF0ZWRBdC5pbm5lckhUTUwgPSBEQkhlbHBlci5jb252ZXJ0VGltZXN0YW1wKHJldmlldy51cGRhdGVkQXQpO1xuXHRsaS5hcHBlbmRDaGlsZCh1cGRhdGVkQXQpOyovXG5cblx0Y29uc3QgcmF0aW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXHRyYXRpbmcuY2xhc3NMaXN0LmFkZCgncmV2aWV3cy1zY29yZScpO1xuXHRyYXRpbmcuaW5uZXJIVE1MID0gYFJhdGluZzogJHtyZXZpZXcucmF0aW5nfWA7XG5cdGxpLmFwcGVuZENoaWxkKHJhdGluZyk7XG5cblx0Y29uc3QgY29tbWVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cdGNvbW1lbnRzLmlubmVySFRNTCA9IHJldmlldy5jb21tZW50cztcblx0bGkuYXBwZW5kQ2hpbGQoY29tbWVudHMpO1xuXG5cdHJldHVybiBsaTtcbn07XG5cbi8qKlxuICogQWRkIHJlc3RhdXJhbnQgbmFtZSB0byB0aGUgYnJlYWRjcnVtYiBuYXZpZ2F0aW9uIG1lbnVcbiAqL1xuY29uc3QgZmlsbEJyZWFkY3J1bWIgPSAocmVzdGF1cmFudD1zZWxmLnJlc3RhdXJhbnQpID0+IHtcblx0Y29uc3QgYnJlYWRjcnVtYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdicmVhZGNydW1iJyk7XG5cdGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcblx0bGkuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuXG5cdC8vU2V0IEFSSUEgYXR0cmlidXRlcyBzbyBzY3JlZW5yZWFkZXIga25vd3MgaXRzIG9uIHRoZSBjdXJyZW50IHBhZ2UgZm9yIHRoZSByZXN0YXVyYW50IGluIHRoZSBicmVhZGNydW1iIHRyYWlsLlxuXHRsaS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCByZXN0YXVyYW50Lm5hbWUpO1xuXHRsaS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCAnYnJlYWRjcnVtYi1kZXNjcmlwdGlvbicpO1xuXHRsaS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcblxuXHQvL0R5bmFtaWNhbGx5IHNldCB0aXRsZSBhdHRyaWJ1dGVcblx0bGkudGl0bGUgPSByZXN0YXVyYW50Lm5hbWU7XG5cdGJyZWFkY3J1bWIuYXBwZW5kQ2hpbGQobGkpO1xufTtcblxuLyoqXG4gKiBHZXQgYSBwYXJhbWV0ZXIgYnkgbmFtZSBmcm9tIHBhZ2UgVVJMLlxuICovXG5jb25zdCBnZXRQYXJhbWV0ZXJCeU5hbWUgPSAobmFtZSwgdXJsKSA9PiB7XG5cdGlmICghdXJsKVxuXHRcdHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXHRuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXFxdXS9nLCAnXFxcXCQmJyk7XG5cdGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgWz8mXSR7bmFtZX0oPShbXiYjXSopfCZ8I3wkKWApLFxuXHRcdHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG5cdGlmICghcmVzdWx0cylcblx0XHRyZXR1cm4gbnVsbDtcblx0aWYgKCFyZXN1bHRzWzJdKVxuXHRcdHJldHVybiAnJztcblx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbn07XG5cbi8qKlxuICogQWRkIG1hcmtlciBmb3IgY3VycmVudCByZXN0YXVyYW50IHRvIHRoZSBtYXAuXG4gKi9cbmNvbnN0IGFkZE1hcmtlclRvTWFwID0gKHJlc3RhdXJhbnQgPSBzZWxmLnJlc3RhdXJhbnQpID0+IHtcblx0Ly8gQWRkIG1hcmtlciB0byB0aGUgbWFwXG5cdGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQoc2VsZi5yZXN0YXVyYW50LCBzZWxmLm1hcCk7XG5cdGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgKCkgPT4ge1xuXHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbWFya2VyLnVybDtcblx0fSk7XG59OyJdfQ==
