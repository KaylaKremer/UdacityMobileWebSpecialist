'use strict';

var restaurant = void 0;
var map = void 0;
var liveMap = false;
var initLoad = true;

/**
 * Initialize Google map, called from HTML.
 */
window.initMap = function () {
	fetchRestaurantFromURL(function (error, restaurant) {
		if (error) {
			// Got an error!
			console.error(error, restaurant);
		} else {
			fillBreadcrumb();
		}
	});
};

/**
 * Get current restaurant from page URL.
 */
var fetchRestaurantFromURL = function fetchRestaurantFromURL(callback) {
	if (self.restaurant) {
		// restaurant already fetched!
		callback(null, self.restaurant);
		return;
	}
	var id = getParameterByName('id');
	if (!id) {
		// no id found in URL
		error = 'No restaurant id in URL';
		callback(error, null);
	} else {
		DBHelper.fetchRestaurantById(id, function (error, restaurant) {
			self.restaurant = restaurant;
			if (!restaurant) {
				console.error(error);
				return;
			}
			fillRestaurantHTML();
			callback(null, restaurant);
		});
	}
};

/**
 * Create restaurant HTML and add it to the webpage
 */

/* If a live map isn't already enabled, removes the static map image and replaces it with a live Google Map. */
var getLiveMap = function getLiveMap() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	if (liveMap) {
		return;
	} else {
		var staticMapImg = document.getElementById('static-map-img');
		staticMapImg.parentNode.removeChild(staticMapImg);
		self.map = new google.maps.Map(document.getElementById('map'), {
			zoom: 16,
			center: self.restaurant.latlng,
			scrollwheel: false
		});
		addMarkerToMap();
		liveMap = true;
	}
};

var fillRestaurantHTML = function fillRestaurantHTML() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	/* Loads a static map image if it's the initial page load. Adds a click event listener so that when the user clicks on the map, it removes the static map image and loads a live map in its place. */
	if (initLoad) {
		var staticMap = DBHelper.staticImageForMapRestaurantInfo(self.restaurant);
		var _map = document.getElementById('map');
		var staticMapImg = document.createElement('img');
		staticMapImg.id = 'static-map-img';
		staticMapImg.alt = 'Static Google Maps image';
		staticMapImg.style.width = _map.clientWidth + 'px';
		staticMapImg.style.height = _map.clientHeight + 'px';
		staticMapImg.src = staticMap;
		staticMapImg.addEventListener('click', function () {
			getLiveMap(self.restaurant);
		});
		_map.appendChild(staticMapImg);
		initLoad = false;
	} else {
		addMarkerToMap();
	}
	var name = document.getElementById('restaurant-name');
	name.innerHTML = restaurant.name;

	/* Creates a dynamic favorite button. When clicked, notifies user that restaurant favorite has been added or removed via visual cues and ARIA label changes. Also updates IDB with favorite status of the restaurant. */
	var favorite = document.getElementById('favorite-button');
	getFavoriteClass(restaurant, favorite);
	favorite.addEventListener('click', function () {
		var isFavorite = void 0;
		if (restaurant.is_favorite === 'false') {
			isFavorite = 'true';
			favorite.title = 'Remove from favorites';
			favorite.setAttribute('aria-label', 'Remove from favorites');
		} else {
			isFavorite = 'false';
			favorite.title = 'Add to favorites';
			favorite.setAttribute('aria-label', 'Add to favorites');
		}
		var restaurantId = restaurant.id;
		DBHelper.updateFavorite(restaurantId, isFavorite);
		restaurant.is_favorite = isFavorite;
		getFavoriteClass(restaurant, favorite);
	});

	/* Lazy loads small or large version of restaurant image based on data-srcset and auto data-sizes. Also dynamically sets alt and title text of the image. */
	var image = document.getElementById('restaurant-img');
	image.className = 'restaurant-img lazyload';
	image.setAttribute('data-src', DBHelper.smallImageUrlForRestaurant(restaurant) + ' 400w');
	image.setAttribute('data-srcset', DBHelper.smallImageUrlForRestaurant(restaurant) + ' 400w, ' + DBHelper.largeImageUrlForRestaurant(restaurant) + ' 800w');
	image.setAttribute('data-sizes', 'auto');
	image.title = '' + restaurant.name;
	image.alt = restaurant.name + ' in ' + restaurant.neighborhood + ' - ' + restaurant.cuisine_type + ' restaurant';

	var cuisine = document.getElementById('restaurant-cuisine');
	cuisine.innerHTML = restaurant.cuisine_type;

	var address = document.getElementById('restaurant-address');
	address.innerHTML = restaurant.address;

	// fill operating hours
	if (restaurant.operating_hours) {
		fillRestaurantHoursHTML();
	}
	// fill reviews
	DBHelper.fetchReviewsById(restaurant.id, fillReviewsHTML);
};

//Create dynamic favorite button
var getFavoriteClass = function getFavoriteClass(restaurant, favorite) {
	if (restaurant.is_favorite === 'true') {
		favorite.classList.add('restaurant-favorite-true');
		favorite.classList.remove('restaurant-favorite-false');
		favorite.innerHTML = '<i class="fas fa-heart"></i>';
	} else {
		favorite.classList.add('restaurant-favorite-false');
		favorite.classList.remove('restaurant-favorite-true');
		favorite.innerHTML = '<i class="far fa-heart"></i>';
	}
};

/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */
var fillRestaurantHoursHTML = function fillRestaurantHoursHTML() {
	var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.operating_hours;

	var hours = document.getElementById('restaurant-hours');
	for (var key in operatingHours) {
		var row = document.createElement('tr');
		var day = document.createElement('td');
		day.innerHTML = key;
		row.appendChild(day);
		var time = document.createElement('td');
		time.innerHTML = operatingHours[key];
		row.appendChild(time);
		hours.appendChild(row);
	}
};

/**
 * Create all reviews HTML and add them to the webpage.
 */
var fillReviewsHTML = function fillReviewsHTML(error, reviews) {
	if (error) {
		console.log(error);
	}
	self.restaurant.reviews = reviews;
	var container = document.getElementById('reviews-container');
	var ul = document.getElementById('reviews-list');

	var title = document.createElement('h2');
	title.innerHTML = 'Reviews';
	container.insertBefore(title, ul);

	if (!reviews) {
		var noReviews = document.createElement('p');
		noReviews.id = 'no-reviews';
		noReviews.innerHTML = 'No reviews yet!';
		container.insertBefore(noReviews, ul);
	} else {
		reviews.forEach(function (review) {
			ul.appendChild(createReviewHTML(review));
		});
		container.appendChild(ul);
	}
};

/**
 * Create review HTML and add it to the webpage.
 */
var createReviewHTML = function createReviewHTML(review) {
	var li = document.createElement('li');
	var name = document.createElement('p');
	name.classList.add('review-header');
	name.innerHTML = review.name;
	li.appendChild(name);

	var timestamp = document.createElement('p');
	timestamp.classList.add('review-header');
	var createdAtTimestamp = new Date(review.createdAt);
	var updatedAtTimestamp = new Date(review.updatedAt);
	if (createdAtTimestamp === updatedAtTimestamp) {
		timestamp.innerHTML = createdAtTimestamp.toLocaleString();
	} else {
		timestamp.innerHTML = updatedAtTimestamp.toLocaleString();
	}
	li.appendChild(timestamp);

	var rating = document.createElement('div');
	rating.classList.add('review-rating');
	if (review.rating > 1) {
		rating.title = review.rating + ' stars';
		rating.setAttribute('aria-label', review.rating + ' stars');
	} else {
		rating.title = review.rating + ' star';
		rating.setAttribute('aria-label', review.rating + ' star');
	}
	rating.innerHTML = review.rating + ' <i class="fas fa-star"></i>';
	li.appendChild(rating);

	var comments = document.createElement('p');
	comments.innerHTML = review.comments;
	li.appendChild(comments);

	return li;
};

/**
 * Add restaurant name to the breadcrumb navigation menu
 */
var fillBreadcrumb = function fillBreadcrumb() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	var breadcrumb = document.getElementById('breadcrumb');
	var li = document.createElement('li');
	li.innerHTML = restaurant.name;

	//Set ARIA attributes so screenreader knows its on the current page for the restaurant in the breadcrumb trail.
	li.setAttribute('aria-label', restaurant.name);
	li.setAttribute('aria-describedby', 'breadcrumb-description');
	li.setAttribute('tabindex', '0');

	//Dynamically set title attribute
	li.title = restaurant.name;
	breadcrumb.appendChild(li);
};

/**
 * Get a parameter by name from page URL.
 */
var getParameterByName = function getParameterByName(name, url) {
	if (!url) url = window.location.href;
	name = name.replace(/[\[\]]/g, '\\$&');
	var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
	    results = regex.exec(url);
	if (!results) return null;
	if (!results[2]) return '';
	return decodeURIComponent(results[2].replace(/\+/g, ' '));
};

/**
 * Add marker for current restaurant to the map.
 */
var addMarkerToMap = function addMarkerToMap() {
	var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;

	// Add marker to the map
	var marker = DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);
	google.maps.event.addListener(marker, 'click', function () {
		window.location.href = marker.url;
	});
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
