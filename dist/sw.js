'use strict';

//Establish version number of cache to remove outdated caches during an update
var cacheVersion = 'v1';

//Assets to cache for offline use
var cacheAssets = ['/', '/index.html', '/restaurant.html', '/restaurant.html?id=1', '/restaurant.html?id=2', '/restaurant.html?id=3', '/restaurant.html?id=4', '/restaurant.html?id=5', '/restaurant.html?id=6', '/restaurant.html?id=7', '/restaurant.html?id=8', '/restaurant.html?id=9', '/restaurant.html?id=10', '/css/styles.css', '/js/idb.js', '/js/dbhelper.js', '/js/main.js', '/js/restaurant_info.js', '/js/register.js', '/img/1_large.jpg', '/img/2_large.jpg', '/img/3_large.jpg', '/img/4_large.jpg', '/img/5_large.jpg', '/img/6_large.jpg', '/img/7_large.jpg', '/img/8_large.jpg', '/img/9_large.jpg', '/img/10_large.jpg', '/img/1_small.jpg', '/img/2_small.jpg', '/img/3_small.jpg', '/img/4_small.jpg', '/img/5_small.jpg', '/img/6_small.jpg', '/img/7_small.jpg', '/img/8_small.jpg', '/img/9_small.jpg', '/img/10_small.jpg'];

//Installs a service worker and caches assets with current cache version as its name.
self.addEventListener('install', function (event) {
	event.waitUntil(caches.open(cacheVersion + '-restaurant').then(function (cache) {
		return cache.addAll(cacheAssets);
	}));
	console.log('Installed service worker and cached assets');
});

/* Updates the service worker with a newer version (if available in a waiting state). Activate fires once older service worker no longer controls current pages. Older cache(s) is also deleted. */
self.addEventListener('activate', function (event) {
	event.waitUntil(caches.keys().then(function (cacheNames) {
		return Promise.all(cacheNames.filter(function (cacheName) {
			return !cacheName.startsWith(cacheVersion);
		}).map(function (cacheName) {
			return caches.delete(cacheName);
		}));
	}));
	console.log('Deleted old cache and activated new service worker');
});

/* Fetches assets from the cache the service worker created if a matching response is found. If not, fetches assets from the network and adds these new asset requests to the cache. */
self.addEventListener('fetch', function (event) {
	event.respondWith(caches.match(event.request).then(function (response) {
		if (response) {
			return response;
		}
		var fetchRequest = event.request.clone();
		return fetch(fetchRequest).then(function (response) {
			if (!response || response.status !== 200 || response.type !== 'basic') {
				return response;
			}
			var responseToCache = response.clone();
			caches.open(cacheVersion + '-restaurant').then(function (cache) {
				cache.put(event.request, responseToCache);
			});
			return response;
		});
	}));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN3LmpzIl0sIm5hbWVzIjpbImNhY2hlVmVyc2lvbiIsImNhY2hlQXNzZXRzIiwic2VsZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsIndhaXRVbnRpbCIsImNhY2hlcyIsIm9wZW4iLCJ0aGVuIiwiY2FjaGUiLCJhZGRBbGwiLCJjb25zb2xlIiwibG9nIiwia2V5cyIsIlByb21pc2UiLCJhbGwiLCJjYWNoZU5hbWVzIiwiZmlsdGVyIiwiY2FjaGVOYW1lIiwic3RhcnRzV2l0aCIsIm1hcCIsImRlbGV0ZSIsInJlc3BvbmRXaXRoIiwibWF0Y2giLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJmZXRjaFJlcXVlc3QiLCJjbG9uZSIsImZldGNoIiwic3RhdHVzIiwidHlwZSIsInJlc3BvbnNlVG9DYWNoZSIsInB1dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLElBQU1BLGVBQWUsSUFBckI7O0FBRUE7QUFDQSxJQUFNQyxjQUFjLENBQ25CLEdBRG1CLEVBRW5CLGFBRm1CLEVBR25CLGtCQUhtQixFQUluQix1QkFKbUIsRUFLbkIsdUJBTG1CLEVBTW5CLHVCQU5tQixFQU9uQix1QkFQbUIsRUFRbkIsdUJBUm1CLEVBU25CLHVCQVRtQixFQVVuQix1QkFWbUIsRUFXbkIsdUJBWG1CLEVBWW5CLHVCQVptQixFQWFuQix3QkFibUIsRUFjbkIsaUJBZG1CLEVBZW5CLFlBZm1CLEVBZ0JuQixpQkFoQm1CLEVBaUJuQixhQWpCbUIsRUFrQm5CLHdCQWxCbUIsRUFtQm5CLGlCQW5CbUIsRUFvQm5CLGtCQXBCbUIsRUFxQm5CLGtCQXJCbUIsRUFzQm5CLGtCQXRCbUIsRUF1Qm5CLGtCQXZCbUIsRUF3Qm5CLGtCQXhCbUIsRUF5Qm5CLGtCQXpCbUIsRUEwQm5CLGtCQTFCbUIsRUEyQm5CLGtCQTNCbUIsRUE0Qm5CLGtCQTVCbUIsRUE2Qm5CLG1CQTdCbUIsRUE4Qm5CLGtCQTlCbUIsRUErQm5CLGtCQS9CbUIsRUFnQ25CLGtCQWhDbUIsRUFpQ25CLGtCQWpDbUIsRUFrQ25CLGtCQWxDbUIsRUFtQ25CLGtCQW5DbUIsRUFvQ25CLGtCQXBDbUIsRUFxQ25CLGtCQXJDbUIsRUFzQ25CLGtCQXRDbUIsRUF1Q25CLG1CQXZDbUIsQ0FBcEI7O0FBMENBO0FBQ0FDLEtBQUtDLGdCQUFMLENBQXNCLFNBQXRCLEVBQWlDLGlCQUFTO0FBQ3pDQyxPQUFNQyxTQUFOLENBQ0NDLE9BQU9DLElBQVAsQ0FBZVAsWUFBZixrQkFBMENRLElBQTFDLENBQStDLGlCQUFTO0FBQ3ZELFNBQU9DLE1BQU1DLE1BQU4sQ0FBYVQsV0FBYixDQUFQO0FBQ0EsRUFGRCxDQUREO0FBS0FVLFNBQVFDLEdBQVIsQ0FBWSw0Q0FBWjtBQUNBLENBUEQ7O0FBU0E7QUFDQVYsS0FBS0MsZ0JBQUwsQ0FBc0IsVUFBdEIsRUFBa0MsaUJBQVM7QUFDMUNDLE9BQU1DLFNBQU4sQ0FBZ0JDLE9BQU9PLElBQVAsR0FBY0wsSUFBZCxDQUFtQixzQkFBYztBQUNoRCxTQUFPTSxRQUFRQyxHQUFSLENBQVlDLFdBQVdDLE1BQVgsQ0FBa0IscUJBQWE7QUFDakQsVUFBTyxDQUFDQyxVQUFVQyxVQUFWLENBQXFCbkIsWUFBckIsQ0FBUjtBQUNBLEdBRmtCLEVBRWhCb0IsR0FGZ0IsQ0FFWixxQkFBYTtBQUNuQixVQUFPZCxPQUFPZSxNQUFQLENBQWNILFNBQWQsQ0FBUDtBQUNBLEdBSmtCLENBQVosQ0FBUDtBQUtBLEVBTmUsQ0FBaEI7QUFPQVAsU0FBUUMsR0FBUixDQUFZLG9EQUFaO0FBQ0EsQ0FURDs7QUFXQTtBQUNBVixLQUFLQyxnQkFBTCxDQUFzQixPQUF0QixFQUErQixpQkFBUztBQUN2Q0MsT0FBTWtCLFdBQU4sQ0FDQ2hCLE9BQU9pQixLQUFQLENBQWFuQixNQUFNb0IsT0FBbkIsRUFBNEJoQixJQUE1QixDQUFpQyxvQkFBWTtBQUM1QyxNQUFHaUIsUUFBSCxFQUFhO0FBQ1osVUFBT0EsUUFBUDtBQUNBO0FBQ0QsTUFBTUMsZUFBZXRCLE1BQU1vQixPQUFOLENBQWNHLEtBQWQsRUFBckI7QUFDQSxTQUFPQyxNQUFNRixZQUFOLEVBQW9CbEIsSUFBcEIsQ0FBeUIsb0JBQVk7QUFDM0MsT0FBRyxDQUFDaUIsUUFBRCxJQUFhQSxTQUFTSSxNQUFULEtBQW9CLEdBQWpDLElBQXdDSixTQUFTSyxJQUFULEtBQWtCLE9BQTdELEVBQXNFO0FBQ3JFLFdBQU9MLFFBQVA7QUFDQTtBQUNELE9BQU1NLGtCQUFrQk4sU0FBU0UsS0FBVCxFQUF4QjtBQUNBckIsVUFBT0MsSUFBUCxDQUFlUCxZQUFmLGtCQUEwQ1EsSUFBMUMsQ0FBK0MsaUJBQVM7QUFDdkRDLFVBQU11QixHQUFOLENBQVU1QixNQUFNb0IsT0FBaEIsRUFBeUJPLGVBQXpCO0FBQ0EsSUFGRDtBQUdBLFVBQU9OLFFBQVA7QUFDQSxHQVRNLENBQVA7QUFVQSxFQWZELENBREQ7QUFrQkEsQ0FuQkQiLCJmaWxlIjoic3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL0VzdGFibGlzaCB2ZXJzaW9uIG51bWJlciBvZiBjYWNoZSB0byByZW1vdmUgb3V0ZGF0ZWQgY2FjaGVzIGR1cmluZyBhbiB1cGRhdGVcbmNvbnN0IGNhY2hlVmVyc2lvbiA9ICd2MSc7XG5cbi8vQXNzZXRzIHRvIGNhY2hlIGZvciBvZmZsaW5lIHVzZVxuY29uc3QgY2FjaGVBc3NldHMgPSBbXG5cdCcvJyxcblx0Jy9pbmRleC5odG1sJyxcblx0Jy9yZXN0YXVyYW50Lmh0bWwnLFxuXHQnL3Jlc3RhdXJhbnQuaHRtbD9pZD0xJyxcblx0Jy9yZXN0YXVyYW50Lmh0bWw/aWQ9MicsXG5cdCcvcmVzdGF1cmFudC5odG1sP2lkPTMnLFxuXHQnL3Jlc3RhdXJhbnQuaHRtbD9pZD00Jyxcblx0Jy9yZXN0YXVyYW50Lmh0bWw/aWQ9NScsXG5cdCcvcmVzdGF1cmFudC5odG1sP2lkPTYnLFxuXHQnL3Jlc3RhdXJhbnQuaHRtbD9pZD03Jyxcblx0Jy9yZXN0YXVyYW50Lmh0bWw/aWQ9OCcsXG5cdCcvcmVzdGF1cmFudC5odG1sP2lkPTknLFxuXHQnL3Jlc3RhdXJhbnQuaHRtbD9pZD0xMCcsXG5cdCcvY3NzL3N0eWxlcy5jc3MnLFxuXHQnL2pzL2lkYi5qcycsXG5cdCcvanMvZGJoZWxwZXIuanMnLFxuXHQnL2pzL21haW4uanMnLFxuXHQnL2pzL3Jlc3RhdXJhbnRfaW5mby5qcycsXG5cdCcvanMvcmVnaXN0ZXIuanMnLFxuXHQnL2ltZy8xX2xhcmdlLmpwZycsXG5cdCcvaW1nLzJfbGFyZ2UuanBnJyxcblx0Jy9pbWcvM19sYXJnZS5qcGcnLFxuXHQnL2ltZy80X2xhcmdlLmpwZycsXG5cdCcvaW1nLzVfbGFyZ2UuanBnJyxcblx0Jy9pbWcvNl9sYXJnZS5qcGcnLFxuXHQnL2ltZy83X2xhcmdlLmpwZycsXG5cdCcvaW1nLzhfbGFyZ2UuanBnJyxcblx0Jy9pbWcvOV9sYXJnZS5qcGcnLFxuXHQnL2ltZy8xMF9sYXJnZS5qcGcnLFxuXHQnL2ltZy8xX3NtYWxsLmpwZycsXG5cdCcvaW1nLzJfc21hbGwuanBnJyxcblx0Jy9pbWcvM19zbWFsbC5qcGcnLFxuXHQnL2ltZy80X3NtYWxsLmpwZycsXG5cdCcvaW1nLzVfc21hbGwuanBnJyxcblx0Jy9pbWcvNl9zbWFsbC5qcGcnLFxuXHQnL2ltZy83X3NtYWxsLmpwZycsXG5cdCcvaW1nLzhfc21hbGwuanBnJyxcblx0Jy9pbWcvOV9zbWFsbC5qcGcnLFxuXHQnL2ltZy8xMF9zbWFsbC5qcGcnXG5dO1xuXG4vL0luc3RhbGxzIGEgc2VydmljZSB3b3JrZXIgYW5kIGNhY2hlcyBhc3NldHMgd2l0aCBjdXJyZW50IGNhY2hlIHZlcnNpb24gYXMgaXRzIG5hbWUuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBldmVudCA9PiB7XG5cdGV2ZW50LndhaXRVbnRpbChcblx0XHRjYWNoZXMub3BlbihgJHtjYWNoZVZlcnNpb259LXJlc3RhdXJhbnRgKS50aGVuKGNhY2hlID0+IHtcblx0XHRcdHJldHVybiBjYWNoZS5hZGRBbGwoY2FjaGVBc3NldHMpO1xuXHRcdH0pXG5cdCk7XG5cdGNvbnNvbGUubG9nKCdJbnN0YWxsZWQgc2VydmljZSB3b3JrZXIgYW5kIGNhY2hlZCBhc3NldHMnKTtcbn0pO1xuXG4vKiBVcGRhdGVzIHRoZSBzZXJ2aWNlIHdvcmtlciB3aXRoIGEgbmV3ZXIgdmVyc2lvbiAoaWYgYXZhaWxhYmxlIGluIGEgd2FpdGluZyBzdGF0ZSkuIEFjdGl2YXRlIGZpcmVzIG9uY2Ugb2xkZXIgc2VydmljZSB3b3JrZXIgbm8gbG9uZ2VyIGNvbnRyb2xzIGN1cnJlbnQgcGFnZXMuIE9sZGVyIGNhY2hlKHMpIGlzIGFsc28gZGVsZXRlZC4gKi9cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignYWN0aXZhdGUnLCBldmVudCA9PiB7XG5cdGV2ZW50LndhaXRVbnRpbChjYWNoZXMua2V5cygpLnRoZW4oY2FjaGVOYW1lcyA9PiB7XG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKGNhY2hlTmFtZXMuZmlsdGVyKGNhY2hlTmFtZSA9PiB7XG5cdFx0XHRyZXR1cm4gIWNhY2hlTmFtZS5zdGFydHNXaXRoKGNhY2hlVmVyc2lvbik7XG5cdFx0fSkubWFwKGNhY2hlTmFtZSA9PiB7XG5cdFx0XHRyZXR1cm4gY2FjaGVzLmRlbGV0ZShjYWNoZU5hbWUpO1xuXHRcdH0pKTtcblx0fSkpO1xuXHRjb25zb2xlLmxvZygnRGVsZXRlZCBvbGQgY2FjaGUgYW5kIGFjdGl2YXRlZCBuZXcgc2VydmljZSB3b3JrZXInKTtcbn0pO1xuXG4vKiBGZXRjaGVzIGFzc2V0cyBmcm9tIHRoZSBjYWNoZSB0aGUgc2VydmljZSB3b3JrZXIgY3JlYXRlZCBpZiBhIG1hdGNoaW5nIHJlc3BvbnNlIGlzIGZvdW5kLiBJZiBub3QsIGZldGNoZXMgYXNzZXRzIGZyb20gdGhlIG5ldHdvcmsgYW5kIGFkZHMgdGhlc2UgbmV3IGFzc2V0IHJlcXVlc3RzIHRvIHRoZSBjYWNoZS4gKi9cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBldmVudCA9PiB7XG5cdGV2ZW50LnJlc3BvbmRXaXRoKFxuXHRcdGNhY2hlcy5tYXRjaChldmVudC5yZXF1ZXN0KS50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdGlmKHJlc3BvbnNlKSB7XG5cdFx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGZldGNoUmVxdWVzdCA9IGV2ZW50LnJlcXVlc3QuY2xvbmUoKTtcblx0XHRcdHJldHVybiBmZXRjaChmZXRjaFJlcXVlc3QpLnRoZW4ocmVzcG9uc2UgPT4ge1xuXHRcdFx0XHRpZighcmVzcG9uc2UgfHwgcmVzcG9uc2Uuc3RhdHVzICE9PSAyMDAgfHwgcmVzcG9uc2UudHlwZSAhPT0gJ2Jhc2ljJykge1xuXHRcdFx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCByZXNwb25zZVRvQ2FjaGUgPSByZXNwb25zZS5jbG9uZSgpO1xuXHRcdFx0XHRjYWNoZXMub3BlbihgJHtjYWNoZVZlcnNpb259LXJlc3RhdXJhbnRgKS50aGVuKGNhY2hlID0+IHtcblx0XHRcdFx0XHRjYWNoZS5wdXQoZXZlbnQucmVxdWVzdCwgcmVzcG9uc2VUb0NhY2hlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHRcdH0pO1xuXHRcdH0pXG5cdCk7XG59KTtcblxuIl19
